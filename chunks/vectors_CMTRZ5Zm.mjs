import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_DFSFkPP8.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Vectors - where possible - based on underlying hardware vector implementations. A vector is similar to an array, but\nwith additional functionality. The restriction is that a vector may only consist of elements that are numerical\ntypes, boolean or pointers.</p>\n<p>A vector is declared similar to an array but uses <code dir=\"auto\">[&#x3C;>]</code> rather than <code dir=\"auto\">[]</code>, e.g. <code dir=\"auto\">int[&#x3C;4>]</code>.</p>\n<p>(If you are searching for the counterpart of C++‘s <code dir=\"auto\">std::vector</code>, look instead at the standard\nlibrary <a href=\"/language-common/arrays/#dynamic-arrays-and-lists\"><code dir=\"auto\">List</code> type</a>.)</p>\n<h2 id=\"arithmetics-on-vectors\">Arithmetics on vectors</h2>\n<p>Vectors support all arithmetics and other operations supported by its underlying type. The operations are\nalways performed elementwise.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">23</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">11</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span><span style=\"--0:#809191;--1:#5E6578\">     // c = { 46, 11 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] a = { 23, 11 };int[<2>] b = { 2, 1 };int[<2>] c = a * b;     // c = { 46, 11 }\"><div></div></button></div></figure></div>\n<p>For integer and boolean types, bit operations such as <code dir=\"auto\">^ | &#x26; &#x3C;&#x3C; >></code> are available, and for pointers, pointer arithmetic\nis supported.</p>\n<h3 id=\"scalar-values\">Scalar values</h3>\n<p>Scalar values will implicitly widen to vectors when used with vectors:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">21</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">14</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] e </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">/</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">      // e = { 3, 2 }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">          // f = { 4, 4 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] d = { 21, 14 };int[<2>] e = d / 7;      // e = { 3, 2 }int[<2>] f = 4;          // f = { 4, 4 }\"><div></div></button></div></figure></div>\n<h2 id=\"additional-operations\">Additional operations</h2>\n<p>The <code dir=\"auto\">std::math</code> module contains a wealth of additional operations available on vectors using dot-method syntax.</p>\n<ul>\n<li><code dir=\"auto\">.sum()</code> - sum all vector elements.</li>\n<li><code dir=\"auto\">.product()</code> - multiply all vector elements.</li>\n<li><code dir=\"auto\">.max()</code> - get the maximum element.</li>\n<li><code dir=\"auto\">.min()</code> - get the minimum element.</li>\n<li><code dir=\"auto\">.dot(other)</code> - return the dot product with the other vector.</li>\n<li><code dir=\"auto\">.length(other)</code> - return the square root of the dot product (not available on integer vectors).</li>\n<li><code dir=\"auto\">.distance(other)</code> - return the length of the difference of the two vectors (not available on integer vectors).</li>\n<li><code dir=\"auto\">.normalize()</code> - return a normalized vector (not available on integer vectors).</li>\n<li><code dir=\"auto\">.comp_lt(other)</code> - return a boolean vector with a component wise ”&#x3C;”</li>\n<li><code dir=\"auto\">.comp_le(other)</code> - return a boolean vector with a component wise ”&#x3C;=”</li>\n<li><code dir=\"auto\">.comp_eq(other)</code> - return a boolean vector with a component wise ”==”</li>\n<li><code dir=\"auto\">.comp_gt(other)</code> - return a boolean vector with a component wise ”>”</li>\n<li><code dir=\"auto\">.comp_ge(other)</code> - return a boolean vector with a component wise ”>=”</li>\n<li><code dir=\"auto\">.comp_ne(other)</code> - return a boolean vector with a component wise ”!=”</li>\n</ul>\n<p>Dot methods available for scalar values, such as <code dir=\"auto\">ceil</code>, <code dir=\"auto\">fma</code> etc are in general also available for vectors.</p>\n<h2 id=\"swizzling\">Swizzling</h2>\n<p>Swizzling using dot notation is supported, using x, y, z, w <em>or</em> r, g, b, a:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">11</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">22</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">33</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">xxzx</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">                         // b = { 11, 11, 33, 11 }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">w</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">                                 // c = 11;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] color </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">11</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">22</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">33</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">FF</span></span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\"> red </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">color</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">r</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">                          // red = 0x11</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<3>] a = { 11, 22, 33 };int[<4>] b = a.xxzx;                         // b = { 11, 11, 33, 11 }int c = b.w;                                 // c = 11;char[<4>] color = { 0x11, 0x22, 0x33, 0xFF };char red = color.r;                          // red = 0x11\"><div></div></button></div></figure></div>\n<h2 id=\"array-like-operations\">Array-like operations</h2>\n<p>Like arrays, it’s possible to make slices and iterate over vectors. It should be noted that the storage alignment of\nvectors are often different from arrays, which should be taken into account when storing vectors.</p>";

				const frontmatter = {"title":"Vectors","description":"Vectors","sidebar":{"order":62}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Common/vectors.md";
				const url = undefined;
				function rawContent() {
					return "\nVectors - where possible - based on underlying hardware vector implementations. A vector is similar to an array, but \nwith additional functionality. The restriction is that a vector may only consist of elements that are numerical\ntypes, boolean or pointers.\n\nA vector is declared similar to an array but uses `[<>]` rather than `[]`, e.g. `int[<4>]`.\n\n(If you are searching for the counterpart of C++'s `std::vector`, look instead at the standard\nlibrary [`List` type](/language-common/arrays/#dynamic-arrays-and-lists).)\n\n## Arithmetics on vectors\n\nVectors support all arithmetics and other operations supported by its underlying type. The operations are\nalways performed elementwise.\n\n```c3\nint[<2>] a = { 23, 11 };\nint[<2>] b = { 2, 1 };\nint[<2>] c = a * b;     // c = { 46, 11 }\n```\n\nFor integer and boolean types, bit operations such as `^ | & << >>` are available, and for pointers, pointer arithmetic\nis supported.\n\n### Scalar values\n\nScalar values will implicitly widen to vectors when used with vectors:\n\n```c3\nint[<2>] d = { 21, 14 };\nint[<2>] e = d / 7;      // e = { 3, 2 }\nint[<2>] f = 4;          // f = { 4, 4 }\n```\n\n## Additional operations\n\nThe `std::math` module contains a wealth of additional operations available on vectors using dot-method syntax.\n\n- `.sum()` - sum all vector elements.\n- `.product()` - multiply all vector elements.\n- `.max()` - get the maximum element.\n- `.min()` - get the minimum element.\n- `.dot(other)` - return the dot product with the other vector.\n- `.length(other)` - return the square root of the dot product (not available on integer vectors).\n- `.distance(other)` - return the length of the difference of the two vectors (not available on integer vectors).\n- `.normalize()` - return a normalized vector (not available on integer vectors).\n- `.comp_lt(other)` - return a boolean vector with a component wise \"<\" \n- `.comp_le(other)` - return a boolean vector with a component wise \"<=\"  \n- `.comp_eq(other)` - return a boolean vector with a component wise \"==\"  \n- `.comp_gt(other)` - return a boolean vector with a component wise \">\"  \n- `.comp_ge(other)` - return a boolean vector with a component wise \">=\"  \n- `.comp_ne(other)` - return a boolean vector with a component wise \"!=\"  \n\nDot methods available for scalar values, such as `ceil`, `fma` etc are in general also available for vectors.\n\n## Swizzling\n\nSwizzling using dot notation is supported, using x, y, z, w *or* r, g, b, a:\n\n```c3\nint[<3>] a = { 11, 22, 33 };\nint[<4>] b = a.xxzx;                         // b = { 11, 11, 33, 11 }\nint c = b.w;                                 // c = 11;\nchar[<4>] color = { 0x11, 0x22, 0x33, 0xFF };\nchar red = color.r;                          // red = 0x11\n```\n\n## Array-like operations\n\nLike arrays, it's possible to make slices and iterate over vectors. It should be noted that the storage alignment of\nvectors are often different from arrays, which should be taken into account when storing vectors.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"arithmetics-on-vectors","text":"Arithmetics on vectors"},{"depth":3,"slug":"scalar-values","text":"Scalar values"},{"depth":2,"slug":"additional-operations","text":"Additional operations"},{"depth":2,"slug":"swizzling","text":"Swizzling"},{"depth":2,"slug":"array-like-operations","text":"Array-like operations"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
