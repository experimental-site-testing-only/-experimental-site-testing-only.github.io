import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_DFSFkPP8.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Attributes are compile-time annotations on functions, types, global constants and variables. Similar to Java annotations, a decoration may also take arguments. A attribute can also represent a bundle of attributes.</p>\n<h2 id=\"built-in-attributes\">Built in attributes</h2>\n<h3 id=\"adhoc\">@adhoc</h3>\n<p><em>Used for: type parameterized generic modules</em></p>\n<p>Normally a parameterized generic module needs to be defined before it is used like:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">my_lib</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\">Type</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> MyType</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Type value;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_code;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Definition here</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">def </span><span style=\"--0:#82AAFF;--1:#3C63B3\">MyType</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;int></span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> MyTypeInt;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">MyType</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;int></span><span style=\"--0:#D6DEEB;--1:#403F53\">) x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module my_lib(<Type>);struct MyType{    Type value;}module my_code;// Definition heredef MyType(<int>) = MyTypeInt;fn void main(){    MyType(<int>) x;}\"><div></div></button></div></figure></div>\n<p>A type with <code dir=\"auto\">@adhoc</code> can be declared parameterized, without any warning being issued, for example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">my_lib</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\">Type</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> MyType @adhoc</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Type value;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_code;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">MyType</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;int></span><span style=\"--0:#D6DEEB;--1:#403F53\">) x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module my_lib(<Type>);struct MyType @adhoc{    Type value;}module my_code;fn void main(){    MyType(<int>) x;}\"><div></div></button></div></figure></div>\n<h3 id=\"alignalignment\">@align(alignment)</h3>\n<p><em>Used for: struct, bitstructs, union, var, function</em></p>\n<p>This attribute sets the minimum alignment for a field or a variable, for example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo @align(32)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">align</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">16</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Foo @align(32){    int a;    int b @align(16);}\"><div></div></button></div></figure></div>\n<h3 id=\"benchmark\">@benchmark</h3>\n<p><em>Used for: function</em></p>\n<p>Marks the function as a benchmark function. Will be added to the list of benchmark functions when the benchmarks are run,\notherwise the function will not be included in the compilation.</p>\n<h3 id=\"bigendian\">@bigendian</h3>\n<p><em>Used for: bitstruct</em></p>\n<p>Lays out the bits as if the data was stored in a big endian type, regardless of host system endianness.</p>\n<h3 id=\"builtin\">@builtin</h3>\n<p><em>Used for: function, macro, global, const</em></p>\n<p>Allows a macro, function, global or constant be used from another module without the module path prefixed.\nShould be used sparingly.</p>\n<h3 id=\"callc\">@callc</h3>\n<p><em>Used for: function</em></p>\n<p>Sets the call convention, which may be ignored if the convention is not supported on the target.\nValid arguments are <code dir=\"auto\">veccall</code>, <code dir=\"auto\">ccall</code>, <code dir=\"auto\">stdcall</code>.</p>\n<h3 id=\"deprecated\">@deprecated</h3>\n<p><em>Used for: types, function, macro, global, const, member</em></p>\n<p>Marks the particular type, global, const or member as deprecated, making use trigger a warning.</p>\n<h3 id=\"export\">@export</h3>\n<p><em>Used for: function, global, const, enum, union, struct, fault</em></p>\n<p>Marks this declaration as an export, this ensures it is never removed and exposes it as public when linking.\nThe attribute takes an optional string value, which is the external name. This acts as if <code dir=\"auto\">@extern</code> had been\nadded with that name.</p>\n<h3 id=\"extern\">@extern</h3>\n<p><em>Used for: function, global, const, enum, union, struct, fault</em></p>\n<p>Sets the external (linkage) name of this declaration.</p>\n<h3 id=\"finalizer\">@finalizer</h3>\n<p><em>Used for: function</em></p>\n<p>Make this function run at shutdown. See <code dir=\"auto\">@init</code> for the optional priority. Note that running a\nfinalizer is a “best effort” attempt by the OS. During abnormal termination it is not guaranteed to run.</p>\n<p>The function must be a void function taking no arguments.</p>\n<h3 id=\"if\">@if</h3>\n<p><em>Used for: all declarations</em></p>\n<p>Conditionally includes the declaration in the compilation. It takes a constant compile time value argument, if this\nvalue is <code dir=\"auto\">true</code> then the declaration is retained, on false it is removed.</p>\n<h3 id=\"init\">@init</h3>\n<p><em>Used for: function</em></p>\n<p>Make this function run at startup before main. It has an optional priority 1 - 65535, with lower\nbeing executed earlier. It is not recommended to use values less than 128 as they are generally\nreserved and using them may interfere with standard program initialization.</p>\n<p>The function must be a void function taking no arguments.</p>\n<h3 id=\"inline\">@inline</h3>\n<p><em>Used for: function, call</em></p>\n<p>Declares a function to always be inlined or if placed on a call, that the call should be inlined.</p>\n<h3 id=\"littleendian\">@littleendian</h3>\n<p><em>Used for: bitstruct</em></p>\n<p>Lays out the bits as if the data was stored in a little endian type, regardless of host system endianness.</p>\n<h3 id=\"local\">@local</h3>\n<p><em>Used for: any declaration</em></p>\n<p>Sets the visibility to “local”, which means it’s only visible in the current module section.</p>\n<h3 id=\"maydiscard\">@maydiscard</h3>\n<p><em>Used for: function, macro</em></p>\n<p>Allows the return value of the function or macro to be discarded even if it is an optional. Should be\nused sparingly.</p>\n<h3 id=\"naked\">@naked</h3>\n<p><em>Used for: function</em></p>\n<p>This attribute disables prologue / epilogue emission for the function.</p>\n<h3 id=\"nodiscard\">@nodiscard</h3>\n<p><em>Used for: function, macro</em></p>\n<p>The return value may not be discarded.</p>\n<h3 id=\"noinit\">@noinit</h3>\n<p><em>Used for: global, local variable</em></p>\n<p>Prevents the compiler from zero initializing the variable.</p>\n<h3 id=\"norecurse\">@norecurse</h3>\n<p><em>Used for: import &#x3C;module_name> @norecurse</em></p>\n<p>Import the module but not sub-modules or parent-modules, see <a href=\"/language-fundamentals/modules/#non-recursive-imports\">Modules Section</a>.</p>\n<h3 id=\"noreturn\">@noreturn</h3>\n<p><em>Used for: function</em></p>\n<p>Declares that the function will never return.</p>\n<h3 id=\"nostrip\">@nostrip</h3>\n<p><em>Used for: any declaration</em></p>\n<p>This causes the declaration never to be stripped from the executable, even if it’s not used. This\nalso transitively applies to any dependencies the declaration might have.</p>\n<h3 id=\"obfuscate\">@obfuscate</h3>\n<p><em>Used for: any declaration</em></p>\n<p>Removes any string values that would identify the declaration in some way. Mostly this is used\non faults and enums to remove the stored names.</p>\n<h3 id=\"operator\">@operator</h3>\n<p><em>Used for: method, macro method</em></p>\n<p>This attribute has arguments <code dir=\"auto\">[]</code> <code dir=\"auto\">[]=</code> <code dir=\"auto\">&#x26;[]</code> and <code dir=\"auto\">len</code> allowing <a href=\"/generic-programming/operator-overloading/\">operator overloading</a> for <code dir=\"auto\">[]</code> and <code dir=\"auto\">foreach</code>.\nBy implementing <code dir=\"auto\">[]</code> and <code dir=\"auto\">len</code>, <code dir=\"auto\">foreach</code> and <code dir=\"auto\">foreach_r</code> is enabled. In order to do <code dir=\"auto\">foreach</code> by reference,\n<code dir=\"auto\">&#x26;[]</code> must be implemented as well.</p>\n<h3 id=\"overlap\">@overlap</h3>\n<p><em>Used for: bitstruct</em></p>\n<p>Allows bitstruct fields to have overlapping bit ranges.</p>\n<h3 id=\"packed\">@packed</h3>\n<p><em>Used for: struct, union</em></p>\n<p>Causes all members to be packed as if they had alignment 1. The alignment of the struct/union is set to 1.\nThis alignment can be overridden with <code dir=\"auto\">@align</code>.</p>\n<h3 id=\"private\">@private</h3>\n<p><em>Used for: any declaration</em></p>\n<p>Sets the visibility to “private”, which means it is visible in the same module, but not from other modules.</p>\n<h3 id=\"pure\">@pure</h3>\n<p><em>Used for: call</em></p>\n<p>Used to annotate a non pure function as “pure” when checking for conformance to <code dir=\"auto\">@pure</code> on\nfunctions.</p>\n<h3 id=\"packed-1\">@packed</h3>\n<p><em>Used for: struct, union, enum</em></p>\n<p>If used on a struct or enum: packs the type, including any components to minimum size. On an enum, it uses the smallest representation containing all its values.</p>\n<h3 id=\"reflect\">@reflect</h3>\n<p><em>Used for: any declaration</em></p>\n<p>Adds additional reflection information. Has no effect currently.</p>\n<h3 id=\"sectionname\">@section(name)</h3>\n<p><em>Used for: function, const, global</em></p>\n<p>Declares that a global variable or function should appear in a specific section.</p>\n<h3 id=\"test\">@test</h3>\n<p><em>Used for: function</em></p>\n<p>Marks the function as a test function. Will be added to the list of test functions when the tests are run,\notherwise the function will not be included in the compilation.</p>\n<h3 id=\"unused\">@unused</h3>\n<p><em>Used for: any declaration</em></p>\n<p>Marks the declaration as possibly unused (but should not emit a warning).</p>\n<h3 id=\"used\">@used</h3>\n<p><em>Used for: any declaration</em></p>\n<p>Marks a parameter, value etc. as must being used.</p>\n<h3 id=\"weak\">@weak</h3>\n<p><em>Used for: function, const, global</em></p>\n<p>Emits a weak symbol rather than a global.</p>\n<h2 id=\"user-defined-attributes\">User defined attributes</h2>\n<p>User defined attributes are intended for conditional application of built-in attributes.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">def @MyAttribute </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { @noreturn @</span><span style=\"--0:#C792EA;--1:#8D46B4\">inline</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// The following two are equivalent:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @MyAttribute { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @noreturn @</span><span style=\"--0:#C792EA;--1:#8D46B4\">inline</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { ... }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"def @MyAttribute = { @noreturn @inline };// The following two are equivalent:fn void foo() @MyAttribute { ... }fn void foo() @noreturn @inline { ... }\"><div></div></button></div></figure></div>\n<p>A user defined attribute may also be completely empty:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">def @MyAttributeEmpty = {};</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"def @MyAttributeEmpty = {};\"><div></div></button></div></figure></div>";

				const frontmatter = {"title":"Attributes","description":"Attributes","sidebar":{"order":67}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Common/attributes.md";
				const url = undefined;
				function rawContent() {
					return "\nAttributes are compile-time annotations on functions, types, global constants and variables. Similar to Java annotations, a decoration may also take arguments. A attribute can also represent a bundle of attributes.\n\n## Built in attributes\n\n### @adhoc \n\n*Used for: type parameterized generic modules*\n\nNormally a parameterized generic module needs to be defined before it is used like:\n```c3\nmodule my_lib(<Type>);\n\nstruct MyType\n{\n\t  Type value;\n}\n\nmodule my_code;\n\n// Definition here\ndef MyType(<int>) = MyTypeInt; \n\nfn void main()\n{\n    MyType(<int>) x;\n}\n```\n\nA type with `@adhoc` can be declared parameterized, without any warning being issued, for example:\n\n```c3\nmodule my_lib(<Type>);\n\nstruct MyType @adhoc\n{\n\t  Type value;\n}\n\nmodule my_code;\n\nfn void main()\n{\n    MyType(<int>) x;\n}\n```\n\n### @align(alignment) \n\n*Used for: struct, bitstructs, union, var, function*\n\nThis attribute sets the minimum alignment for a field or a variable, for example:\n\n```c3\nstruct Foo @align(32)\n{\n    int a;\n    int b @align(16);\n}\n```\n\n### @benchmark\n\n*Used for: function*\n\nMarks the function as a benchmark function. Will be added to the list of benchmark functions when the benchmarks are run,\notherwise the function will not be included in the compilation.\n\n### @bigendian\n\n*Used for: bitstruct*\n\nLays out the bits as if the data was stored in a big endian type, regardless of host system endianness.\n\n### @builtin\n\n*Used for: function, macro, global, const*\n\nAllows a macro, function, global or constant be used from another module without the module path prefixed.\nShould be used sparingly.\n\n### @callc\n\n*Used for: function*\n\nSets the call convention, which may be ignored if the convention is not supported on the target.\nValid arguments are `veccall`, `ccall`, `stdcall`.\n\n### @deprecated\n\n*Used for: types, function, macro, global, const, member*\n\nMarks the particular type, global, const or member as deprecated, making use trigger a warning.\n\n### @export\n\n*Used for: function, global, const, enum, union, struct, fault*\n\nMarks this declaration as an export, this ensures it is never removed and exposes it as public when linking.\nThe attribute takes an optional string value, which is the external name. This acts as if `@extern` had been\nadded with that name.\n\n### @extern\n\n*Used for: function, global, const, enum, union, struct, fault*\n\nSets the external (linkage) name of this declaration.\n\n### @finalizer\n\n*Used for: function*\n\nMake this function run at shutdown. See `@init` for the optional priority. Note that running a\nfinalizer is a \"best effort\" attempt by the OS. During abnormal termination it is not guaranteed to run.\n\nThe function must be a void function taking no arguments.\n\n### @if\n\n*Used for: all declarations*\n\nConditionally includes the declaration in the compilation. It takes a constant compile time value argument, if this\nvalue is `true` then the declaration is retained, on false it is removed.\n\n### @init\n\n*Used for: function*\n\nMake this function run at startup before main. It has an optional priority 1 - 65535, with lower\nbeing executed earlier. It is not recommended to use values less than 128 as they are generally\nreserved and using them may interfere with standard program initialization.\n\nThe function must be a void function taking no arguments.\n\n### @inline\n\n*Used for: function, call*\n\nDeclares a function to always be inlined or if placed on a call, that the call should be inlined.\n\n### @littleendian \n\n*Used for: bitstruct*\n\nLays out the bits as if the data was stored in a little endian type, regardless of host system endianness.\n\n### @local\n\n*Used for: any declaration*\n\nSets the visibility to \"local\", which means it's only visible in the current module section.\n\n### @maydiscard\n\n*Used for: function, macro*\n\nAllows the return value of the function or macro to be discarded even if it is an optional. Should be\nused sparingly.\n\n### @naked\n\n*Used for: function*\n\nThis attribute disables prologue / epilogue emission for the function.\n\n### @nodiscard\n\n*Used for: function, macro*\n\nThe return value may not be discarded.\n\n### @noinit\n\n*Used for: global, local variable*\n\nPrevents the compiler from zero initializing the variable.\n\n### @norecurse\n\n*Used for: import <module_name> @norecurse*\n\nImport the module but not sub-modules or parent-modules, see [Modules Section](/language-fundamentals/modules/#non-recursive-imports).\n\n### @noreturn\n\n*Used for: function*\n\nDeclares that the function will never return.\n\n### @nostrip\n\n*Used for: any declaration*\n\nThis causes the declaration never to be stripped from the executable, even if it's not used. This\nalso transitively applies to any dependencies the declaration might have.\n\n### @obfuscate\n\n*Used for: any declaration*\n\nRemoves any string values that would identify the declaration in some way. Mostly this is used\non faults and enums to remove the stored names.\n\n### @operator\n\n*Used for: method, macro method*\n\nThis attribute has arguments `[]` `[]=` `&[]` and `len` allowing [operator overloading](/generic-programming/operator-overloading/) for `[]` and `foreach`.\nBy implementing `[]` and `len`, `foreach` and `foreach_r` is enabled. In order to do `foreach` by reference,\n`&[]` must be implemented as well.\n\n### @overlap\n\n*Used for: bitstruct*\n\nAllows bitstruct fields to have overlapping bit ranges.\n\n### @packed\n\n*Used for: struct, union*\n\nCauses all members to be packed as if they had alignment 1. The alignment of the struct/union is set to 1.\nThis alignment can be overridden with `@align`.\n\n### @private\n\n*Used for: any declaration*\n\nSets the visibility to \"private\", which means it is visible in the same module, but not from other modules.\n\n### @pure\n\n*Used for: call*\n\nUsed to annotate a non pure function as \"pure\" when checking for conformance to `@pure` on \nfunctions.\n\n### @packed\n\n*Used for: struct, union, enum*\n\nIf used on a struct or enum: packs the type, including any components to minimum size. On an enum, it uses the smallest representation containing all its values.\n\n### @reflect\n\n*Used for: any declaration*\n\nAdds additional reflection information. Has no effect currently.\n\n### @section(name)\n\n*Used for: function, const, global*\n\nDeclares that a global variable or function should appear in a specific section.\n\n### @test\n\n*Used for: function*\n\nMarks the function as a test function. Will be added to the list of test functions when the tests are run,\notherwise the function will not be included in the compilation.\n\n### @unused\n\n*Used for: any declaration*\n\nMarks the declaration as possibly unused (but should not emit a warning).\n\n### @used\n\n*Used for: any declaration*\n\nMarks a parameter, value etc. as must being used.\n\n### @weak\n\n*Used for: function, const, global*\n\nEmits a weak symbol rather than a global.\n\n## User defined attributes\n\nUser defined attributes are intended for conditional application of built-in attributes.\n \n```c3\ndef @MyAttribute = { @noreturn @inline };\n\n// The following two are equivalent:\nfn void foo() @MyAttribute { ... }\nfn void foo() @noreturn @inline { ... }\n```\n\nA user defined attribute may also be completely empty:\n\n```\ndef @MyAttributeEmpty = {};\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"built-in-attributes","text":"Built in attributes"},{"depth":3,"slug":"adhoc","text":"@adhoc"},{"depth":3,"slug":"alignalignment","text":"@align(alignment)"},{"depth":3,"slug":"benchmark","text":"@benchmark"},{"depth":3,"slug":"bigendian","text":"@bigendian"},{"depth":3,"slug":"builtin","text":"@builtin"},{"depth":3,"slug":"callc","text":"@callc"},{"depth":3,"slug":"deprecated","text":"@deprecated"},{"depth":3,"slug":"export","text":"@export"},{"depth":3,"slug":"extern","text":"@extern"},{"depth":3,"slug":"finalizer","text":"@finalizer"},{"depth":3,"slug":"if","text":"@if"},{"depth":3,"slug":"init","text":"@init"},{"depth":3,"slug":"inline","text":"@inline"},{"depth":3,"slug":"littleendian","text":"@littleendian"},{"depth":3,"slug":"local","text":"@local"},{"depth":3,"slug":"maydiscard","text":"@maydiscard"},{"depth":3,"slug":"naked","text":"@naked"},{"depth":3,"slug":"nodiscard","text":"@nodiscard"},{"depth":3,"slug":"noinit","text":"@noinit"},{"depth":3,"slug":"norecurse","text":"@norecurse"},{"depth":3,"slug":"noreturn","text":"@noreturn"},{"depth":3,"slug":"nostrip","text":"@nostrip"},{"depth":3,"slug":"obfuscate","text":"@obfuscate"},{"depth":3,"slug":"operator","text":"@operator"},{"depth":3,"slug":"overlap","text":"@overlap"},{"depth":3,"slug":"packed","text":"@packed"},{"depth":3,"slug":"private","text":"@private"},{"depth":3,"slug":"pure","text":"@pure"},{"depth":3,"slug":"packed-1","text":"@packed"},{"depth":3,"slug":"reflect","text":"@reflect"},{"depth":3,"slug":"sectionname","text":"@section(name)"},{"depth":3,"slug":"test","text":"@test"},{"depth":3,"slug":"unused","text":"@unused"},{"depth":3,"slug":"used","text":"@used"},{"depth":3,"slug":"weak","text":"@weak"},{"depth":2,"slug":"user-defined-attributes","text":"User defined attributes"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
